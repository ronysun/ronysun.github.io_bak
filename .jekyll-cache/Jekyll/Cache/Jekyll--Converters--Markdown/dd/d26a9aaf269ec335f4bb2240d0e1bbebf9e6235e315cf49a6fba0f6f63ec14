I"o'<h2 id="ci框架">CI框架</h2>
<p>Jenkins+Gerrit+GIT</p>
<h3 id="jenkins与gerrit的集成">Jenkins与Gerrit的集成</h3>
<p>在Gerrit中的配置:<br />
1.Create the profile through in Gerrit web interface for your Jenkins user, and set up a SSH key for that user.<br />
2.Gerrit web interface &gt; Admin &gt; Groups &gt; Non-Interactive Users &gt; Add your jenkins user.<br />
3.Admin &gt; Projects &gt; … &gt; Access &gt; Edit<br />
    Reference: refs/*<br />
    Read: ALLOW for Non-Interactive Users<br />
    Reference: refs/heads/*<br />
    Label Code-Review: -1, +1 for Non-Interactive Users<br />
    Label Verified: -1, +1 for Non-Interactive Users</p>

<p>IMPORTANT: On Gerrit 2.7+, you also need to grant “Stream Events” capability. Without this, the plugin will not work, will try to connect to Gerrit repeatedly, and will eventually cause OutOfMemoryError on Gerrit.</p>

<p>1.Gerrit web interface &gt; People &gt; Create New Group : “Event Streaming Users”. Add your jenkins user.<br />
2.Admin &gt; Projects &gt; All-Projects &gt; Access &gt; Edit<br />
    Global Capabilities<br />
    Stream Events: ALLOW for Event Streaming Users<br />
在Jenkins中的配置：<br />
在Jenkins中的Manage Jenkins–&gt;Plugin Manager中添加Gerrit Trigger插件<br />
插件安装完后在Manage Jenkins–&gt;Gerrit Trigger中进行设置：<br />
<img src="https://wiki.jenkins.io/download/attachments/45481993/server-settings.png?version=1&amp;modificationDate=1278331124000&amp;api=v2" alt="Gerrit Trigger设置" /></p>
<h4 id="jenkins每次都checkout-master分支代码的问题">jenkins每次都checkout master分支代码的问题</h4>
<p>由于Jenkins默认的设置是每次checkout 的代码都是master分支上的代码，因此pachset create时执行的tox测试的代码，并不是本次commit push的代码。需要进行如下设置：<br />
To get the Git Plugin to download your change; set Refspec to $GERRIT_REFSPEC and the Choosing strategy to Gerrit Trigger. This may be under ‘‘Additional Behaviours/Strategy For Choosing What To Build’ rather than directly visible as depicted in the screenshot. You may also need to set ‘Branches to build’ to $GERRIT_BRANCH. If this does not work for you set Refspec to refs/changes/<em>:refs/changes/</em> and ‘Branches to build’ to $GERRIT_REFSPEC.</p>

<p>Note: Be aware that $GERRIT_BRANCH and $GERRIT_REFSPEC are not set in the Ref Updated case. If you want to trigger a build, you can set Refspec and ‘Branches to build’ to $GERRIT_REFNAME.
<img src="https://wiki.jenkins.io/download/attachments/45481993/git_config.png?version=1&amp;modificationDate=1278331124000&amp;api=v2" alt="" /></p>
<h3 id="jenkinsfile编写">Jenkinsfile编写</h3>
<p>可以说jenkinsfile就是pipeline，Jenkinsfile支持Declarative和Scripted Pipelines。Declarative是在2.X版本后开始支持的：</p>
<ul>
  <li>提供了更加丰富语法特性</li>
  <li>更加容易编写和阅读</li>
</ul>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">#</span><span class="o">!</span><span class="n">groovy</span>
<span class="n">pipeline</span> <span class="o">{</span>
    <span class="n">agent</span> <span class="n">any</span>
    <span class="n">environment</span> <span class="o">{</span>
        <span class="n">DOCKER_IMAGE</span> <span class="o">=</span> <span class="n">sh</span> <span class="nl">returnStdout:</span><span class="kc">true</span><span class="o">,</span> <span class="nl">script:</span> <span class="s2">"cat Buildfile.yaml|grep docker-image|awk '{printf \$2}'"</span>
        <span class="n">VERSION</span> <span class="o">=</span> <span class="n">sh</span> <span class="nl">returnStdout:</span><span class="kc">true</span><span class="o">,</span> <span class="nl">script:</span> <span class="s1">'cat Buildfile.yaml|grep version|awk \'{print $2}\''</span>
    <span class="o">}</span>
    <span class="n">stages</span> <span class="o">{</span>
        <span class="n">stage</span><span class="o">(</span><span class="s1">'unitTest: pep8'</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">steps</span> <span class="o">{</span>
                <span class="n">sh</span> <span class="s1">'tox -e pep8'</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">stage</span><span class="o">(</span><span class="s1">'unitTest: py27'</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">steps</span> <span class="o">{</span>
                <span class="n">sh</span> <span class="s1">'tox -e py27'</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">stage</span><span class="o">(</span><span class="s1">'Building'</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">when</span> <span class="o">{</span>
                <span class="n">beforeAgent</span> <span class="kc">true</span>
                <span class="n">anyOf</span> <span class="o">{</span>
                    <span class="n">changelog</span> <span class="s1">'RPM BUILD'</span>
                    <span class="n">changelog</span> <span class="s1">'DEPLOY'</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="n">agent</span><span class="o">{</span>
               <span class="n">docker</span> <span class="o">{</span>
                   <span class="n">image</span> <span class="s2">"ironic-p"</span>
               <span class="o">}</span>
           <span class="o">}</span>
           <span class="n">steps</span> <span class="o">{</span>
               <span class="n">echo</span> <span class="s1">'Building......'</span>
                <span class="n">sh</span> <span class="s2">"git checkout $VERSION"</span>
                <span class="n">sh</span> <span class="s1">'python setup.py sdist'</span>
                <span class="n">sh</span> <span class="s1">'cp dist/*.tar.gz /root/rpmbuild/SOURCES/'</span>
                <span class="n">sh</span> <span class="s2">"sed -i \"s/Release:\\([ \\t]*\\)\\([0-9]*\\)\\(.*\$\\)/Release:\\1\${BUILD_ID}\\3/g\" /root/rpmbuild/SPECS/openstack-ironic.spec"</span>
                <span class="n">sh</span> <span class="s1">'rpmbuild -ba /root/rpmbuild/SPECS/openstack-ironic.spec'</span>
                <span class="n">sh</span> <span class="s2">"ls -l /root/rpmbuild/RPMS"</span>
                <span class="n">sh</span> <span class="s2">"pwd"</span>
                <span class="n">sh</span> <span class="s2">"ls"</span>
                <span class="n">sh</span> <span class="s2">"cat Buildfile.yaml"</span>
            <span class="o">}</span>
       <span class="o">}</span>
       <span class="n">stage</span><span class="o">(</span><span class="s1">'Deploy'</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">when</span> <span class="o">{</span>
                <span class="n">beforeAgent</span> <span class="kc">true</span>
                <span class="n">changelog</span> <span class="s1">'DEPLOY'</span>
            <span class="o">}</span>
           <span class="n">steps</span> <span class="o">{</span>
               <span class="n">echo</span> <span class="s1">'Deploying......'</span>
               <span class="n">ansiblePlaybook</span> <span class="nl">disableHostKeyChecking:</span> <span class="kc">true</span><span class="o">,</span> <span class="nl">playbook:</span> <span class="s1">'test-deploy.yaml'</span>

           <span class="o">}</span>
       <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="jenkinsfile中根据git-tag作为判断条件">Jenkinsfile中根据git tag作为判断条件</h3>
<p>Jenkinsfile的官方文档中对when的说明中有如下描述：<br />
tag<br />
Execute the stage if the <font color="red">TAG_NAME</font> variable matches the given pattern. Example: <font color="red">when { tag "release-*" }</font>. If an empty pattern is provided the stage will execute if the <font color="red">TAG_NAME</font> variable exists (same as <font color="red">buildingTag()</font>).
写法如下：</p>
<pre><code class="language-Groovy">when {
    beforeAgent true
    tag comparator: 'REGEXP', pattern: '[0-9]+\\.[0-9]+\\.[0-9]+\\-rc'
}
</code></pre>
<p>但这里没有生效，显示TAG_NAME为null。<br />
解决方法：<br />
后安装插件<a href="https://wiki.jenkins.io/display/JENKINS/Git+Parameter+Plugin">Git Parameter Plug-In</a>,添加TAG_NAME参数：
<img src="https://github.com/ronysun/MarkdownImage/raw/master/Jenkins-build-by-paramiter.png" alt="BuildByParameter" /></p>

<h3 id="environment通过shell输出进行变量赋值字符串后带有换行符的问题">environment通过shell输出进行变量赋值，字符串后带有换行符的问题：</h3>
<pre><code class="language-Groovy">    environment {
        TAG_NAME = sh returnStdout:true, script: "git describe --tags"
    }
</code></pre>
<p>上面的步骤会导致TAG_NAME这个变量的最后有一个看不到的换行符，可能会导致某些问题。
解决方法：
用awk解决：git describe –tags|awk ‘{printf $1}’</p>
<h3 id="pipeline脚本中引用环境变量时变量后不能直接带">pipeline脚本中引用环境变量时变量后不能直接带.</h3>
<pre><code class="language-Groovy">       stage('uploadRPM') {
           steps {
               sh "echo hello-$TAG_NAME-$BUILD_ID.EL7"
           }
       }
</code></pre>
<p>上面的写法会报错，应修改如下：
${BUILD_ID}.EL7</p>
<h3 id="jenkins中job运行在docker中时报错">Jenkins中job运行在docker中时，报错：</h3>
<p><img src="https://github.com/ronysun/MarkdownImage/raw/master/Jenkins-build-in-docker-error.png" alt="error-build-in-docker" />
问题原因：<a href="https://access.redhat.com/errata/RHBA-2018:0434">oci-mount的bug导致</a><br />
解决方法：<br />
升级oci-mount到2.3.3以上版本
升级docker</p>
:ET